// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="measure_con,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=102,HLS_SYN_LUT=197,HLS_VERSION=2019_2}" *)

module measure_con (
        ap_clk,
        ap_rst_n,
        counter_in_V,
        countdone_in_V,
        start_out_V,
        reset_out_V,
        rgb_led_V,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] counter_in_V;
input  [0:0] countdone_in_V;
output  [0:0] start_out_V;
output  [0:0] reset_out_V;
output  [2:0] rgb_led_V;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg[0:0] start_out_V;
reg[0:0] reset_out_V;
reg[2:0] rgb_led_V;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    result_count_V_ap_vld;
wire   [0:0] measure_start_V;
reg   [0:0] result_finished_V;
reg    result_finished_V_ap_vld;
wire   [0:0] measure_reset_V;
wire   [0:0] measure_reset_V_read_read_fu_60_p2;
reg   [0:0] measure_reset_V_read_reg_130;
wire   [0:0] measure_start_V_read_read_fu_66_p2;
reg   [0:0] measure_start_V_read_reg_134;
wire   [0:0] countdone_in_V_read_read_fu_120_p2;
reg   [0:0] reset_out_V_preg;
reg   [0:0] start_out_V_preg;
reg   [2:0] rgb_led_V_preg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 reset_out_V_preg = 1'd0;
#0 start_out_V_preg = 1'd0;
#0 rgb_led_V_preg = 3'd0;
end

measure_con_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
measure_con_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .result_count_V(counter_in_V),
    .result_count_V_ap_vld(result_count_V_ap_vld),
    .measure_start_V(measure_start_V),
    .result_finished_V(result_finished_V),
    .result_finished_V_ap_vld(result_finished_V_ap_vld),
    .measure_reset_V(measure_reset_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        reset_out_V_preg <= 1'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            if ((measure_reset_V_read_read_fu_60_p2 == 1'd1)) begin
                reset_out_V_preg <= 1'd1;
            end else if ((measure_reset_V_read_read_fu_60_p2 == 1'd0)) begin
                reset_out_V_preg <= 1'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                rgb_led_V_preg[0] <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (measure_start_V_read_read_fu_66_p2 == 1'd1) & (measure_reset_V_read_read_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                        rgb_led_V_preg[0] <= 1'b1;
        end else if ((((ap_start == 1'b1) & (measure_reset_V_read_read_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (measure_start_V_read_read_fu_66_p2 == 1'd0) & (measure_reset_V_read_read_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
                        rgb_led_V_preg[0] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        start_out_V_preg <= 1'd0;
    end else begin
        if (((ap_start == 1'b1) & (measure_start_V_read_read_fu_66_p2 == 1'd1) & (measure_reset_V_read_read_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            start_out_V_preg <= 1'd1;
        end else if ((((ap_start == 1'b1) & (measure_reset_V_read_read_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (measure_start_V_read_read_fu_66_p2 == 1'd0) & (measure_reset_V_read_read_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
            start_out_V_preg <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        measure_reset_V_read_reg_130 <= measure_reset_V;
        measure_start_V_read_reg_134 <= measure_start_V;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((measure_reset_V_read_read_fu_60_p2 == 1'd1)) begin
            reset_out_V = 1'd1;
        end else if ((measure_reset_V_read_read_fu_60_p2 == 1'd0)) begin
            reset_out_V = 1'd0;
        end else begin
            reset_out_V = reset_out_V_preg;
        end
    end else begin
        reset_out_V = reset_out_V_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        result_count_V_ap_vld = 1'b1;
    end else begin
        result_count_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((countdone_in_V_read_read_fu_120_p2 == 1'd1) & (measure_start_V_read_reg_134 == 1'd1) & (measure_reset_V_read_reg_130 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        result_finished_V = 1'd1;
    end else if ((((ap_start == 1'b1) & (measure_reset_V_read_read_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (measure_start_V_read_read_fu_66_p2 == 1'd0) & (measure_reset_V_read_read_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((countdone_in_V_read_read_fu_120_p2 == 1'd0) & (measure_start_V_read_reg_134 == 1'd1) & (measure_reset_V_read_reg_130 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        result_finished_V = 1'd0;
    end else begin
        result_finished_V = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (measure_reset_V_read_read_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (measure_start_V_read_read_fu_66_p2 == 1'd0) & (measure_reset_V_read_read_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((countdone_in_V_read_read_fu_120_p2 == 1'd1) & (measure_start_V_read_reg_134 == 1'd1) & (measure_reset_V_read_reg_130 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((countdone_in_V_read_read_fu_120_p2 == 1'd0) & (measure_start_V_read_reg_134 == 1'd1) & (measure_reset_V_read_reg_130 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        result_finished_V_ap_vld = 1'b1;
    end else begin
        result_finished_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((countdone_in_V_read_read_fu_120_p2 == 1'd1) & (measure_start_V_read_reg_134 == 1'd1) & (measure_reset_V_read_reg_130 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        rgb_led_V = 3'd7;
    end else if (((countdone_in_V_read_read_fu_120_p2 == 1'd0) & (measure_start_V_read_reg_134 == 1'd1) & (measure_reset_V_read_reg_130 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        rgb_led_V = 3'd2;
    end else if (((ap_start == 1'b1) & (measure_start_V_read_read_fu_66_p2 == 1'd1) & (measure_reset_V_read_read_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        rgb_led_V = 3'd1;
    end else if ((((ap_start == 1'b1) & (measure_reset_V_read_read_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (measure_start_V_read_read_fu_66_p2 == 1'd0) & (measure_reset_V_read_read_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        rgb_led_V = 3'd0;
    end else begin
        rgb_led_V = rgb_led_V_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (measure_start_V_read_read_fu_66_p2 == 1'd1) & (measure_reset_V_read_read_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        start_out_V = 1'd1;
    end else if ((((ap_start == 1'b1) & (measure_reset_V_read_read_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (measure_start_V_read_read_fu_66_p2 == 1'd0) & (measure_reset_V_read_read_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        start_out_V = 1'd0;
    end else begin
        start_out_V = start_out_V_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign countdone_in_V_read_read_fu_120_p2 = countdone_in_V;

assign measure_reset_V_read_read_fu_60_p2 = measure_reset_V;

assign measure_start_V_read_read_fu_66_p2 = measure_start_V;

always @ (posedge ap_clk) begin
    rgb_led_V_preg[2:1] <= 2'b00;
end

endmodule //measure_con

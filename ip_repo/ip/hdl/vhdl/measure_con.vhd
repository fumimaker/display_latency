-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity measure_con is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    counter_in_V : IN STD_LOGIC_VECTOR (31 downto 0);
    countdone_in_V : IN STD_LOGIC_VECTOR (0 downto 0);
    start_out_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    reset_out_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    rgb_led_V : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of measure_con is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "measure_con,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=102,HLS_SYN_LUT=197,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal result_count_V_ap_vld : STD_LOGIC;
    signal measure_start_V : STD_LOGIC_VECTOR (0 downto 0);
    signal result_finished_V : STD_LOGIC_VECTOR (0 downto 0);
    signal result_finished_V_ap_vld : STD_LOGIC;
    signal measure_reset_V : STD_LOGIC_VECTOR (0 downto 0);
    signal measure_reset_V_read_read_fu_60_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal measure_reset_V_read_reg_130 : STD_LOGIC_VECTOR (0 downto 0);
    signal measure_start_V_read_read_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal measure_start_V_read_reg_134 : STD_LOGIC_VECTOR (0 downto 0);
    signal countdone_in_V_read_read_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reset_out_V_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal start_out_V_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal rgb_led_V_preg : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component measure_con_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        result_count_V : IN STD_LOGIC_VECTOR (31 downto 0);
        result_count_V_ap_vld : IN STD_LOGIC;
        measure_start_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        result_finished_V : IN STD_LOGIC_VECTOR (0 downto 0);
        result_finished_V_ap_vld : IN STD_LOGIC;
        measure_reset_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    measure_con_AXILiteS_s_axi_U : component measure_con_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        result_count_V => counter_in_V,
        result_count_V_ap_vld => result_count_V_ap_vld,
        measure_start_V => measure_start_V,
        result_finished_V => result_finished_V,
        result_finished_V_ap_vld => result_finished_V_ap_vld,
        measure_reset_V => measure_reset_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reset_out_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                reset_out_V_preg <= ap_const_lv1_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    if ((measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_1)) then 
                        reset_out_V_preg <= ap_const_lv1_1;
                    elsif ((measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0)) then 
                        reset_out_V_preg <= ap_const_lv1_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    rgb_led_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                rgb_led_V_preg(0) <= '0';
            else
                if (((ap_start = ap_const_logic_1) and (measure_start_V_read_read_fu_66_p2 = ap_const_lv1_1) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    rgb_led_V_preg(0) <= '1';
                elsif ((((ap_start = ap_const_logic_1) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (measure_start_V_read_read_fu_66_p2 = ap_const_lv1_0) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    rgb_led_V_preg(0) <= '0';
                end if; 
            end if;
        end if;
    end process;


    start_out_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                start_out_V_preg <= ap_const_lv1_0;
            else
                if (((ap_start = ap_const_logic_1) and (measure_start_V_read_read_fu_66_p2 = ap_const_lv1_1) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    start_out_V_preg <= ap_const_lv1_1;
                elsif ((((ap_start = ap_const_logic_1) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (measure_start_V_read_read_fu_66_p2 = ap_const_lv1_0) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    start_out_V_preg <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                measure_reset_V_read_reg_130 <= measure_reset_V;
                measure_start_V_read_reg_134 <= measure_start_V;
            end if;
        end if;
    end process;
    rgb_led_V_preg(2 downto 1) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    countdone_in_V_read_read_fu_120_p2 <= countdone_in_V;
    measure_reset_V_read_read_fu_60_p2 <= measure_reset_V;
    measure_start_V_read_read_fu_66_p2 <= measure_start_V;

    reset_out_V_assign_proc : process(ap_start, ap_CS_fsm_state1, measure_reset_V_read_read_fu_60_p2, reset_out_V_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_1)) then 
                reset_out_V <= ap_const_lv1_1;
            elsif ((measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0)) then 
                reset_out_V <= ap_const_lv1_0;
            else 
                reset_out_V <= reset_out_V_preg;
            end if;
        else 
            reset_out_V <= reset_out_V_preg;
        end if; 
    end process;


    result_count_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            result_count_V_ap_vld <= ap_const_logic_1;
        else 
            result_count_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    result_finished_V_assign_proc : process(ap_start, ap_CS_fsm_state1, measure_reset_V_read_read_fu_60_p2, measure_reset_V_read_reg_130, measure_start_V_read_read_fu_66_p2, measure_start_V_read_reg_134, countdone_in_V_read_read_fu_120_p2, ap_CS_fsm_state2)
    begin
        if (((countdone_in_V_read_read_fu_120_p2 = ap_const_lv1_1) and (measure_start_V_read_reg_134 = ap_const_lv1_1) and (measure_reset_V_read_reg_130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            result_finished_V <= ap_const_lv1_1;
        elsif ((((ap_start = ap_const_logic_1) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (measure_start_V_read_read_fu_66_p2 = ap_const_lv1_0) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((countdone_in_V_read_read_fu_120_p2 = ap_const_lv1_0) and (measure_start_V_read_reg_134 = ap_const_lv1_1) and (measure_reset_V_read_reg_130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            result_finished_V <= ap_const_lv1_0;
        else 
            result_finished_V <= "X";
        end if; 
    end process;


    result_finished_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, measure_reset_V_read_read_fu_60_p2, measure_reset_V_read_reg_130, measure_start_V_read_read_fu_66_p2, measure_start_V_read_reg_134, countdone_in_V_read_read_fu_120_p2, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_1) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (measure_start_V_read_read_fu_66_p2 = ap_const_lv1_0) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((countdone_in_V_read_read_fu_120_p2 = ap_const_lv1_1) and (measure_start_V_read_reg_134 = ap_const_lv1_1) and (measure_reset_V_read_reg_130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((countdone_in_V_read_read_fu_120_p2 = ap_const_lv1_0) and (measure_start_V_read_reg_134 = ap_const_lv1_1) and (measure_reset_V_read_reg_130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            result_finished_V_ap_vld <= ap_const_logic_1;
        else 
            result_finished_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    rgb_led_V_assign_proc : process(ap_start, ap_CS_fsm_state1, measure_reset_V_read_read_fu_60_p2, measure_reset_V_read_reg_130, measure_start_V_read_read_fu_66_p2, measure_start_V_read_reg_134, countdone_in_V_read_read_fu_120_p2, rgb_led_V_preg, ap_CS_fsm_state2)
    begin
        if (((countdone_in_V_read_read_fu_120_p2 = ap_const_lv1_1) and (measure_start_V_read_reg_134 = ap_const_lv1_1) and (measure_reset_V_read_reg_130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rgb_led_V <= ap_const_lv3_7;
        elsif (((countdone_in_V_read_read_fu_120_p2 = ap_const_lv1_0) and (measure_start_V_read_reg_134 = ap_const_lv1_1) and (measure_reset_V_read_reg_130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rgb_led_V <= ap_const_lv3_2;
        elsif (((ap_start = ap_const_logic_1) and (measure_start_V_read_read_fu_66_p2 = ap_const_lv1_1) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rgb_led_V <= ap_const_lv3_1;
        elsif ((((ap_start = ap_const_logic_1) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (measure_start_V_read_read_fu_66_p2 = ap_const_lv1_0) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            rgb_led_V <= ap_const_lv3_0;
        else 
            rgb_led_V <= rgb_led_V_preg;
        end if; 
    end process;


    start_out_V_assign_proc : process(ap_start, ap_CS_fsm_state1, measure_reset_V_read_read_fu_60_p2, measure_start_V_read_read_fu_66_p2, start_out_V_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (measure_start_V_read_read_fu_66_p2 = ap_const_lv1_1) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            start_out_V <= ap_const_lv1_1;
        elsif ((((ap_start = ap_const_logic_1) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (measure_start_V_read_read_fu_66_p2 = ap_const_lv1_0) and (measure_reset_V_read_read_fu_60_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            start_out_V <= ap_const_lv1_0;
        else 
            start_out_V <= start_out_V_preg;
        end if; 
    end process;

end behav;
